import os
import logging
import asyncio
import nest_asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from parser import process_zip_file
from google_drive import upload_file_to_drive, create_shareable_link

# =========== Bot Config ===========
BOT_TOKEN = "7804596940:AAGEiCQI8UKyeLrQMJ-UpTHrsSDHJ2N8l90"
DOWNLOAD_DIR = "downloads"
os.makedirs(DOWNLOAD_DIR, exist_ok=True)
MAX_FILE_SIZE = 45 * 1024 * 1024  # 45MB

# =========== Logging ===========
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# =========== Storage ===========
user_keywords = {}

# =========== Command Handlers ===========

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã ‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã!\n"
        "‡¶è‡¶á ‡¶¨‡¶ü‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶¨‡¶æ ‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶® ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§\n"
        "‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá /get [‡¶∂‡¶¨‡ßç‡¶¶/‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶®] ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ï‡¶ø‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®‡•§\n"
        "‡¶§‡¶æ‡¶∞‡¶™‡¶∞ .zip, .rar ‡¶Ö‡¶•‡¶¨‡¶æ .txt ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§\n"
        "‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶§‡ßá /cmd ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§\n\n"
        "_Created by Nazmul Hasan Nahin_"
    )

async def cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîò *‡¶¨‡¶ü ‡¶è‡¶∞ ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶ì ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶∏‡¶Æ‡ßÇ‡¶π:*\n\n"
        "1Ô∏è‚É£ `/get yourkeyword` - ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶∂‡¶¨‡ßç‡¶¶/‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶® ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®: `/get example.com`).\n"
        "2Ô∏è‚É£ ‡¶Ü‡¶∞‡ßç‡¶ï‡¶æ‡¶á‡¶≠ (.zip/.rar) ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü (.txt) ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶†‡¶æ‡¶®, ‡¶¨‡¶ü ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶ï‡¶ø‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡¶¨‡ßá‡•§\n"
        "3Ô∏è‚É£ ‡¶¨‡¶°‡¶º ‡¶´‡¶æ‡¶á‡¶≤ ‡¶π‡¶≤‡ßá ‡¶Ö‡¶ü‡ßã Google Drive-‡¶è ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡¶¨‡ßá ‡¶ì ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶¨‡ßá‡•§\n"
        "4Ô∏è‚É£ `/cmd` - ‡¶è‡¶á ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶ø‡¶ï‡¶æ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®‡•§\n\n"
        "üëâ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á `/get` ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ï‡¶ø‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶®‡¶æ ‡¶π‡¶≤‡ßá ‡¶¨‡¶ü ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ!\n\n"
        "_Created by Nazmul Hasan Nahin_",
        parse_mode="Markdown"
    )

async def set_keyword(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        keyword = " ".join(context.args).strip()
        user_keywords[update.effective_user.id] = keyword
        await update.message.reply_text(
            f"‚úÖ ‡¶è‡¶ñ‡¶® ‡¶•‡ßá‡¶ï‡ßá `{keyword}` ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ ‡¶π‡¶¨‡ßá!\n‡¶è‡¶ñ‡¶® .zip, .rar ‡¶Ö‡¶•‡¶¨‡¶æ .txt ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§",
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text("‚ö†Ô∏è ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶ï‡¶ø‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°/‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶® ‡¶¶‡¶ø‡¶®! ‡¶Ø‡ßá‡¶Æ‡¶®: `/get example.com`", parse_mode="Markdown")

# =========== File Handler ===========

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    keyword = user_keywords.get(user_id)

    if not keyword:
        await update.message.reply_text("‚ùå ‡¶Ü‡¶ó‡ßá `/get` ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ï‡¶ø‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®!", parse_mode="Markdown")
        return

    try:
        file = update.message.document
        file_name = file.file_name
        file_size = file.file_size
        file_path = os.path.join(DOWNLOAD_DIR, file_name)

        logger.info(f"üìÅ Received file: {file_name}, Size: {file_size}")

        # Large file upload to drive
        if file_size > MAX_FILE_SIZE:
            await update.message.reply_text("‚ö†Ô∏è ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶¨‡¶°‡¶º, Google Drive-‡¶è ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá...")
            file_obj = await file.get_file()
            await file_obj.download_to_drive(custom_path=file_path)
            logger.info(f"üì• File downloaded: {file_path}")
            drive_file_id = upload_file_to_drive(file_path)
            link = create_shareable_link(drive_file_id)
            await update.message.reply_text(f"üìé Google Drive ‡¶≤‡¶ø‡¶Ç‡¶ï:\n{link}")
            return

        # Normal processing
        await update.message.reply_text("üì• ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        file_obj = await file.get_file()
        await file_obj.download_to_drive(custom_path=file_path)
        await update.message.reply_text(f"üìÇ ‡¶´‡¶æ‡¶á‡¶≤ `{file_name}` ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...", parse_mode="Markdown")

        result_file, count = None, 0
        if file_name.endswith((".zip", ".rar")):
            result_file, count = process_zip_file(file_path, keyword)
        elif file_name.endswith(".txt"):
            with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
                lines = f.readlines()
            matches = [line for line in lines if keyword in line]
            result_file = os.path.join(DOWNLOAD_DIR, "result.txt")
            with open(result_file, "w", encoding="utf-8") as f:
                f.writelines(matches)
            count = len(matches)
        else:
            await update.message.reply_text("‚ùå ‡¶è‡¶á ‡¶´‡¶æ‡¶á‡¶≤ ‡¶ü‡¶æ‡¶á‡¶™ ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá‡¶° ‡¶®‡¶æ‡•§")
            return

        await update.message.reply_text(f"‚úÖ `{keyword}` ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá {count} ‡¶¨‡¶æ‡¶∞‡•§", parse_mode="Markdown")

        if result_file and os.path.getsize(result_file) > MAX_FILE_SIZE:
            drive_file_id = upload_file_to_drive(result_file)
            link = create_shareable_link(drive_file_id)
            await update.message.reply_text(f"üìé ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶´‡¶æ‡¶á‡¶≤ ‡¶¨‡¶°‡¶º, Google Drive ‡¶≤‡¶ø‡¶Ç‡¶ï:\n{link}")
        else:
            with open(result_file, "rb") as f:
                await update.message.reply_document(f, filename=os.path.basename(result_file))

    except Exception as e:
        logger.error("‚ùå File processing error", exc_info=True)
        await update.message.reply_text(f"‚ùå ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá:\n{str(e)}")

    finally:
        for file_path_to_clean in [file_path, result_file]:
            if file_path_to_clean and os.path.exists(file_path_to_clean):
                try:
                    os.remove(file_path_to_clean)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Cleanup failed: {e}")

# =========== Main ===========

async def main():
    print("ü§ñ Bot is starting...")
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cmd", cmd))
    app.add_handler(CommandHandler("get", set_keyword))
    app.add_handler(MessageHandler(
        filters.Document.FileExtension("zip")
        | filters.Document.FileExtension("rar")
        | filters.Document.FileExtension("txt"),
        handle_file
    ))

    await app.run_polling()

# =========== Entry Point (Render-compatible) ===========

import asyncio
import nest_asyncio

import sys

from bot import main  # ‡¶Ø‡¶¶‡¶ø ‡¶∏‡¶¨ ‡¶ï‡ßã‡¶° ‡¶è‡¶ï ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶•‡¶æ‡¶ï‡ßá ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ main() ‡¶∞‡¶æ‡¶ñ‡¶≤‡ßá‡¶á ‡¶π‡¶¨‡ßá

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except RuntimeError as e:
        if "This event loop is already running" in str(e):
            nest_asyncio.apply()
            loop = asyncio.get_event_loop()
            loop.run_until_complete(main())
        else:
            raise
